{"version":3,"sources":["api.tsx","atoms.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","isDarkAtom","atom","key","default","Chart","coinId","isDark","useRecoilValue","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","type","series","name","map","price","x","time_close","y","open","high","low","close","options","theme","mode","chart","height","width","background","plotOptions","candlestick","colors","upward","downward","wick","useFillColor","yaxis","show","labels","formatter","val","index","toFixed","xaxis","DataList","styled","div","ListName","span","DataColor","props","isValue","valueCheck","value","Price","tickersData","useState","setData","loading","setLoading","useEffect","quotes","USD","market_cap","volume_24h","percent_change_1h","percent_change_24h","percent_change_7d","Title","h1","accentColor","Loader","Container","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","textColor","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","history","useHistory","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","Helmet","onClick","goBack","rank","symbol","description","total_supply","max_supply","to","path","CoinsList","ul","li","cardBgColor","Img","img","Coins","setDarkAtom","useSetRecoilState","prev","slice","coin","pathname","id","src","toLowerCase","Router","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.c8b73c03.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 3;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((response) => response.json());\n}\n","import { atom } from \"recoil\";\n\nexport const isDarkAtom = atom({\n  key: \"isDark\",\n  default: true,\n});\n","import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface ChartProps {\n  coinId: string;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n  const isDark = useRecoilValue(isDarkAtom);\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    {\n      refetchInterval: 10000,\n    }\n  );\n\n  return (\n    <div>\n      {\n        isLoading ? (\n          \"Loading chart...\"\n        ) : (\n          <ApexChart\n            type=\"candlestick\"\n            series={[\n              {\n                name: \"Price\",\n                data: data?.map((price) => ({\n                  x: price.time_close,\n                  y: [price.open, price.high, price.low, price.close],\n                })),\n              },\n            ]}\n            options={{\n              theme: {\n                mode: isDark ? \"dark\" : \"light\",\n              },\n              chart: {\n                type: \"candlestick\",\n                height: 500,\n                width: 500,\n                background: \"transparent\",\n              },\n              plotOptions: {\n                candlestick: {\n                  colors: {\n                    upward: \"#00B746\",\n                    downward: \"#EF403C\",\n                  },\n                  wick: {\n                    useFillColor: true,\n                  },\n                },\n              },\n              yaxis: {\n                show: true,\n                labels: {\n                  formatter: function (val, index) {\n                    return val.toFixed(0);\n                  },\n                },\n              },\n              xaxis: {\n                type: \"datetime\",\n                labels: {\n                  show: true,\n                },\n              },\n            }}\n          />\n        )\n        // <ApexChart\n        //   type=\"line\"\n        //   series={[\n        //     {\n        //       name: \"price\",\n        //       data: data?.map((price) => price.close),\n        //     },\n        //   ]}\n        //   options={{\n        //     theme: {\n        //       mode: \"dark\",\n        //     },\n        //     chart: {\n        //       height: 500,\n        //       width: 500,\n        //       toolbar: {\n        //         show: false,\n        //       },\n        //       background: \"transparent\",\n        //     },\n        //     grid: {\n        //       show: true,\n        //     },\n        //     stroke: {\n        //       curve: \"smooth\",\n        //       width: 4,\n        //     },\n        //     yaxis: {\n        //       show: true,\n        //       labels: {\n        //         formatter: function (val, index) {\n        //           return val.toFixed(0);\n        //         },\n        //       },\n        //     },\n        //     xaxis: {\n        //       labels: {\n        //         show: true,\n        //       },\n        //       type: \"datetime\",\n        //       categories: data?.map((price) => price.time_close),\n        //     },\n        //     fill: {\n        //       type: \"gradient\",\n        //       gradient: {\n        //         gradientToColors: [\"#0be881\"],\n        //         stops: [0, 100],\n        //       },\n        //     },\n        //     colors: [\"#0fbcf9\"],\n        //     tooltip: {\n        //       y: {\n        //         formatter: (value) => `$ ${value.toFixed(3)}`,\n        //       },\n        //     },\n        //   }}\n        // />\n      }\n    </div>\n  );\n}\n\nexport default Chart;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst DataList = styled.div`\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 20px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n`;\n\nconst ListName = styled.span`\n  font-weight: 800;\n  font-size: 18px;\n`;\n\nconst DataColor = styled.span<{ isValue?: Boolean }>`\n  color: ${(props) => (props.isValue ? \"lightgreen\" : \"red\")};\n`;\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\ninterface PriceProps {\n  tickersData?: PriceData;\n}\n\nconst valueCheck = (value: number | undefined) => {\n  if (value) {\n    return value >= 0;\n  }\n};\n\nfunction Price({ tickersData }: PriceProps) {\n  const [data, setData] = useState<PriceData>();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setData(tickersData);\n    setLoading(false);\n  }, [tickersData]);\n\n  return (\n    <div>\n      {loading ? (\n        \"Loading...\"\n      ) : (\n        <div>\n          <DataList>\n            <ListName>MarketCap : </ListName>$ {data?.quotes.USD.market_cap}\n          </DataList>\n          <DataList>\n            <ListName>Volume(24h) :</ListName>$ {data?.quotes.USD.volume_24h}\n          </DataList>\n          <DataList>\n            <ListName>Change Rate(1h) :</ListName>\n            <DataColor isValue={valueCheck(data?.quotes.USD.percent_change_1h)}>\n              {data?.quotes.USD.percent_change_1h}\n            </DataColor>\n          </DataList>\n          <DataList>\n            <ListName>Change Rate(24h) :</ListName>\n            <DataColor\n              isValue={valueCheck(data?.quotes.USD.percent_change_24h)}\n            >\n              {data?.quotes.USD.percent_change_24h}\n            </DataColor>\n          </DataList>\n          <DataList>\n            <ListName>Change Rate(7d) :</ListName>\n            <DataColor isValue={valueCheck(data?.quotes.USD.percent_change_7d)}>\n              {data?.quotes.USD.percent_change_7d}\n            </DataColor>\n          </DataList>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Price;\n","import { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  Link,\n  Route,\n  Switch,\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\n\nconst Title = styled.h1`\n  font-size: 35px;\n  color: ${(props) => props.theme.accentColor};\n  justify-self: center;\n  align-self: center;\n`;\n\nconst Loader = styled.div`\n  text-align: center;\n  display: block;\n`;\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  div {\n    align-self: center;\n  }\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\n\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\n\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 7px 0px;\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    display: block;\n  }\n`;\n\ninterface RouteParams {\n  coinId: string;\n}\n\ninterface RouteState {\n  name: string;\n}\n\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  contract: string;\n  platform: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nfunction Coin() {\n  const { coinId } = useParams<RouteParams>();\n  const { state } = useLocation<RouteState>();\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\n  const history = useHistory();\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId)\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId),\n    {\n      refetchInterval: 5000,\n    }\n  );\n  /* const [loading, setLoading] = useState(true);\n  const [info, setInfo] = useState<InfoData>();\n  const [priceInfo, setPriceInfo] = useState<PriceData>();\n  useEffect(() => {\n    (async () => {\n      const infoData = await (\n        await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n      ).json();\n      const priceData = await (\n        await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n      ).json();\n      setInfo(infoData);\n      setPriceInfo(priceData);\n      setLoading(false);\n    })();\n  }, [coinId]); */\n  const loading = infoLoading || tickersLoading;\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <div>\n          <button onClick={() => history.goBack()}>Back</button>\n        </div>\n        <Title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>$ {tickersData?.quotes.USD.price.toFixed(2)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n\n          <Tabs>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tab>\n          </Tabs>\n\n          <Switch>\n            <Route path={`/:coinId/price`}>\n              <Price tickersData={tickersData} />\n            </Route>\n            <Route path={`/:coinId/chart`}>\n              <Chart coinId={coinId} />\n            </Route>\n          </Switch>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default Coin;\n","import { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\nimport { isDarkAtom } from \"../atoms\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  div {\n    align-self: center;\n    justify-self: flex-end;\n  }\n`;\n\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: ${(props) => props.theme.cardBgColor};\n  color: ${(props) => props.theme.textColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  border: 1px solid white;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 40px;\n  color: ${(props) => props.theme.accentColor};\n  justify-self: center;\n  align-self: center;\n`;\n\nconst Loader = styled.div`\n  text-align: center;\n  display: block;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nfunction Coins() {\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n  /* const [coins, setCoins] = useState<ICoin[]>([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\n      const json = await response.json();\n      setCoins(json.slice(0, 100));\n      setLoading(false);\n    })();\n  }, []); */\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <div></div>\n        <Title>코인</Title>\n        <div>\n          <button onClick={toggleDarkAtom}>Toggle Mode</button>\n        </div>\n      </Header>\n      {isLoading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <CoinsList>\n          {data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link\n                to={{\n                  pathname: `/${coin.id}`,\n                  state: { name: coin.name },\n                }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\n\nexport default Coins;\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/\">\n          <Coins />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#8e44ad\",\n  cardBgColor: \"#2f3640\",\n};\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#8e44ad\",\n  cardBgColor: \"white\",\n};\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n*{\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n}\na{\n\ttext-decoration: none;\n\tcolor: inherit;\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}